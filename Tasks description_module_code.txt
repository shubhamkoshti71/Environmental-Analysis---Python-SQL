
**TASKS DESCRIPTION for Module.py**

1. Reading the Data from CSV

The function read_data_from_csv() reads the data from a CSV file named 'iot_telemetry_data.csv' using the pandas library.
It returns the DataFrame containing the loaded data.

2. Renaming the columns

The DataFrame obtained from the previous task is used as input. The function returns the DataFrame with renamed columns:

ts -> timestamp: Renaming the "ts" column to "timestamp" provides a clearer description of the data.
device -> device_id: Renaming the "device" column to "device_id" specifies that the column represents the unique identifier of the device.
co -> carbon_monoxide: Renaming the "co" column to "carbon_monoxide" clarifies that the column contains data related to carbon monoxide levels.
humidity: No renaming required, as "humidity" already provides a meaningful description of the data.
light: No renaming required, as "light" already provides a meaningful description of the data.
lpg -> liquefied_petroleum_gas: Renaming the "lpg" column to "liquefied_petroleum_gas" specifies that the column represents data related to liquefied petroleum gas levels.
motion: No renaming required, as "motion" already provides a meaningful description of the data.
smoke: No renaming required, as "smoke" already provides a meaningful description of the data.
temp -> temperature: Renaming the "temp" column to "temperature" provides a clearer description of the data.

3. Checking for null values

The function null_values_check() checks for null values in each column of the DataFrame. The function returns a Series that contains the count of null values in each column.

4. Removing Duplicates

The function remove_duplicates() removes any duplicate rows from the DataFrame. It operates on the DataFrame obtained after renaming the columns.
The function returns the DataFrame without any duplicate rows.

5. Handling missing values

The function handle_missing_values() removes any rows containing missing values (null values) from the DataFrame. The DataFrame obtained from the previous task is used as input. The function returns the DataFrame without any missing values.

6. Data Type Conversion

The function convert_data_types() converts the data types of selected columns in the DataFrame to their appropriate types. It uses the pandas libary method to convert the "timestamp" column to datetime type, and convert the "humidity," "light," "motion," and "temperature" columns to float and boolean types. The DataFrame obtained after handling missing values is used as input. The function returns the DataFrame with the converted data types.

7. Exporting the cleaned Dataset

The function export_the_dataset() exports the cleaned DataFrame to a new CSV file named 'cleaned_environment.csv'. It uses the pandas library to write the data to the CSV file. The DataFrame obtained from the previous task is used as input and return the cleaned dataframe 'df'.

8. Generate tables using the cleaned Dataset

Utilizing the MySQL database information provided in "Database info," logged in manually and imported the cleaned dataset and created the table name 'cleaned_environment' that  contains the below columns:

timestamp
device_id
carbon_monoxide
humidity
light
liquefied_petroleum_gas
motion
smoke
temperature

